#!/usr/bin/python

import requests
import xml.etree.ElementTree as ET
import progressbar
import networkx as nx
import bellmanford as bf

G = nx.DiGraph()

from time import sleep
bar = progressbar.ProgressBar(maxval=30, \
    widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
#number of faces in whole network
N=16
barcount=1
node_route={}
rows, cols = (N, 3) #3=(node,neghibor,faceid)
face_route = [[0 for i in range(cols)] for j in range(rows)]


def node_face(src,dst):
  for x in face_route:
    if x[0] == src and x[1] == dst:
      return x[2]
  return -1

print("Creating the network topology")
bar.start()
tree = ET.parse('topology.xml')
root = tree.getroot()
for nodes in root:
 for node in nodes:
     G.add_node(node.tag[1:])
     node_route.setdefault(node.tag[1:], [])
     bar.update(barcount+1)
     barcount=barcount+1
     sleep(0.1)

i=0
for nodes in root:
 for node in nodes:
     for edge in node:
       G.add_edge(node.tag[1:], edge.tag[1:], length=1)
       face_route[i]=(node.tag[1:], edge.tag[1:], edge.text)
       bar.update(barcount+1)
       barcount=barcount+1
       sleep(0.1)
       i=i+1 

bar.finish()
barcount=1
print('Generating the route')
bar.start()

tree = ET.parse('locator.xml')
root = tree.getroot()
xtop = ET.Element('routes')
comment=ET.Comment('Generated by hICN Path Computation Element')
xtop.append(comment)

for node in nodes:
  for locator in root:
     for producer in locator:
       if producer.tag != node.tag:
         for prefix in producer:
               path_nodes = bf.bellman_ford(G, source=node.tag[1:], target=producer.tag[1:],weight="length")
               j=0
               for route in path_nodes[1]:                                    
                   if prefix.text in node_route[route]:
                      continue
                   elif route != producer.tag[1:]:
                      nnode = ET.SubElement(xtop,route)
                      xprefix = ET.SubElement(nnode,"prefix")
                      text=str(prefix.text)
                      new=text.split("/",1)[0]
                      xprefix.text = new

                      xlen = ET.SubElement(nnode,"len")
                      new=text.split("/",1)[1]
                      xlen.text = new

                      # hICN router configuration  
                      xfaceid = ET.SubElement(nnode,"faceid")
                      xfaceid.text = node_face(path_nodes[1][j],path_nodes[1][j+1])
                      j=j+1 
                      # IP router configuration  
                      #Here
                      node_route[route].append(prefix.text)
                      bar.update(barcount+1)
                      barcount=barcount+1
                      sleep(0.1)
xroute = ET.ElementTree(xtop)
xroute.write('route.xml')
bar.finish()
print(' ')
